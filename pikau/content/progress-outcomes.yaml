progress-outcome-1:
  name: Progress outcome 1
  description: >
    In authentic contexts and taking account of end-users, students use their decomposition skills to break down simple non-computerised tasks into precise, unambiguous, step-by-step instructions (algorithmic thinking). They give these instructions, identify any errors in them as they are followed, and correct them (simple debugging).
  exemplars: http://technology.tki.org.nz/Technology-in-the-NZC/Computational-thinking-for-digital-technologies/(tab)/PO1

progress-outcome-2:
  name: Progress outcome 2
  description: >
    In authentic contexts and taking account of end-users, students give, follow and debug simple algorithms in computerised and non-computerised contexts. They use these algorithms to create simple programs involving outputs and sequencing (putting instructions one after the other) in age-appropriate programming environments.
  exemplars: http://technology.tki.org.nz/Technology-in-the-NZC/Computational-thinking-for-digital-technologies/(tab)/PO2

progress-outcome-3:
  name: Progress outcome 3
  description: >
    In authentic contexts and taking account of end-users, students decompose problems into step-by-step instructions to create algorithms for computer programs. They use logical thinking to predict the behaviour of the programs, and they understand that there can be more than one algorithm for the same problem. They develop and debug simple programs that use inputs, outputs, sequence and iteration (repeating part of the algorithm with a loop). They understand that digital devices store data using just two states represented by binary digits (bits).
  exemplars: http://technology.tki.org.nz/Technology-in-the-NZC/Computational-thinking-for-digital-technologies/(tab)/PO3

progress-outcome-4:
  name: Progress outcome 4
  description: >
    In authentic contexts and taking account of end-users, students decompose problems to create simple algorithms using the three building blocks of programing: sequence, selection, and iteration. They implement these algorithms by creating programs that use inputs, outputs, sequence, basic selection using comparative operators, and iteration. They debug simple algorithms and programs by identifying when things go wrong with their instructions and correcting them, and they are able to explain why things went wrong and how they fixed them.
    Students understand that digital devices represent data with binary digits and have ways of detecting errors in data storage and transmission. They evaluate the efficiency of algorithms, recognising that computers need to search and sort large amounts of data. They also evaluate user interfaces in relation to their efficiency and usability.
  exemplars: http://technology.tki.org.nz/Technology-in-the-NZC/Computational-thinking-for-digital-technologies/(tab)/PO4

progress-outcome-5:
  name: Progress outcome 5
  description: >
    In authentic contexts and taking account of end-users, students independently decompose problems into algorithms. They use these algorithms to create programs with inputs, outputs, sequence, selection using comparative and logical operators and variables of different data types, and iteration. They determine when to use different types of control structures.
    Students document their programs, using an organised approach for testing and debugging. They understand how computers store more complex types of data using binary digits, and they develop programs considering human-computer interaction (HCI) heuristics.
  exemplars: http://technology.tki.org.nz/Technology-in-the-NZC/Computational-thinking-for-digital-technologies/(tab)/PO5

progress-outcome-6:
  name: Progress outcome 6
  description: >
    In authentic contexts and taking account of end-users, students determine and compare the “cost” (computational complexity) of two iterative algorithms for the same problem size. They understand the concept of compression coding for different media types, its typical uses, and how it enables widely used technologies to function.
    Students use an iterative process to design, develop, document and test basic computer programs. They apply design principles and usability heuristics to their own designs and evaluate user interfaces in terms of them.
  exemplars: http://technology.tki.org.nz/Technology-in-the-NZC/Computational-thinking-for-digital-technologies/(tab)/PO6

progress-outcome-7:
  name: Progress outcome 7
  description: >
    In authentic contexts and taking account of end-users, students analyse concepts in digital technologies (for example, information systems, encryption, error control, complexity and tractability, autonomous control) by explaining the relevant mechanisms that underpin them, how they are used in real world applications, and the key problems or issues related to them.
    Students discuss the purpose of a selection of data structures and evaluate their use in terms of trade-offs between performance and storage requirements and their suitability for different algorithms. They use an iterative process to design, develop, document and test advanced computer programs.
  exemplars:
    http://technology.tki.org.nz/Technology-in-the-NZC/Computational-thinking-for-digital-technologies/(tab)/PO7

progress-outcome-8:
  name: Progress outcome 8
  description: >
    In authentic contexts and taking account of end-users, students evaluate concepts in digital technologies (for example, formal languages, network communication protocols, artificial intelligence, graphics and visual computing, big data, social algorithms) in relation to how key mechanisms underpin them and how they are applied in different scenarios when developing real world applications.
    Students understand accepted software engineering methodologies and user experience design processes and apply their key concepts to design, develop, document and test complex computer programs.
  exemplars: http://technology.tki.org.nz/Technology-in-the-NZC/Computational-thinking-for-digital-technologies/(tab)/PO8
